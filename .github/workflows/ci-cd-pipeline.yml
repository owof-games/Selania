name: ðŸš€ CI/CD Pipeline (Public)

on:
  workflow_dispatch:
    inputs:
      runnerMain:
        type: string
        required: true
      runnerMacos:
        type: string
        required: true
      validDeployTargets:
        type: string
        required: true
        default: '[]'
      buildTargets:
        type: string
        required: true
        default: '[]'
      metadataConfig:
        type: string
        required: true
      testDataConfig:
        type: string
        required: true
      artifactConfig:
        type: string
        required: true

permissions:
  contents: write

jobs:
  unpack_inputs:
    name: Unpack Inputs
    runs-on: ${{ inputs.runnerMain }}
    defaults:
      run:
        shell: bash
    outputs:
      projectName: ${{ steps.unpack.outputs.projectName }}
      skipTests: ${{ steps.unpack.outputs.skipTests }}
      testsOnly: ${{ steps.unpack.outputs.testsOnly }}
      buildType: ${{ steps.unpack.outputs.buildType }}
      buildVersion: ${{ steps.unpack.outputs.buildVersion }}
      retentionDays: ${{ steps.unpack.outputs.retentionDays }}
      requiresCombined: ${{ steps.unpack.outputs.requiresCombined }}
      skipPerBuildTarget: ${{ steps.unpack.outputs.skipPerBuildTarget }}
      unityVersion: ${{ steps.unpack.outputs.unityVersion }}
      useGitLfs: ${{ steps.unpack.outputs.useGitLfs }}
      editModePath: ${{ steps.unpack.outputs.editModePath }}
      playModePath: ${{ steps.unpack.outputs.playModePath }}
      timeoutMinutesTests: ${{ steps.unpack.outputs.timeoutMinutesTests }}
      timeoutMinutesBuild: ${{ steps.unpack.outputs.timeoutMinutesBuild }}
      quietMode: ${{ steps.unpack.outputs.quietMode }}
    steps:
      - id: unpack
        run: |
          meta='${{ inputs.metadataConfig }}'
          artifact='${{ inputs.artifactConfig }}'
          testData='${{ inputs.testDataConfig }}'

          #Test Data Config
          echo "unityVersion=$(echo "$testData" | jq -r .unityVersion)" >> "$GITHUB_OUTPUT"
          echo "useGitLfs=$(echo "$testData" | jq -r .useGitLfs)" >> "$GITHUB_OUTPUT"
          echo "editModePath=$(echo "$testData" | jq -r .editModePath)" >> "$GITHUB_OUTPUT"
          echo "playModePath=$(echo "$testData" | jq -r .playModePath)" >> "$GITHUB_OUTPUT"
          echo "quietMode=$(echo "$testData" | jq -r .quietMode)" >> "$GITHUB_OUTPUT"

          # Metadata Config
          echo "projectName=$(echo "$meta" | jq -r .projectName)" >> "$GITHUB_OUTPUT"
          echo "skipTests=$(echo "$meta" | jq -r .skipTests)" >> "$GITHUB_OUTPUT"
          echo "testsOnly=$(echo "$meta" | jq -r .testsOnly)" >> "$GITHUB_OUTPUT"
          echo "buildType=$(echo "$meta" | jq -r .buildType)" >> "$GITHUB_OUTPUT"
          echo "buildVersion=$(echo "$meta" | jq -r .buildVersion)" >> "$GITHUB_OUTPUT"
          echo "retentionDays=$(echo "$meta" | jq -r .retentionDays)" >> "$GITHUB_OUTPUT"
          echo "timeoutMinutesTests=$(echo "$meta" | jq -r .timeoutMinutesTests)" >> "$GITHUB_OUTPUT"
          echo "timeoutMinutesBuild=$(echo "$meta" | jq -r .timeoutMinutesBuild)" >> "$GITHUB_OUTPUT"

          # Artifacts Config
          echo "requiresCombined=$(echo "$artifact" | jq -r .requiresCombined)" >> "$GITHUB_OUTPUT"
          echo "skipPerBuildTarget=$(echo "$artifact" | jq -r .skipPerBuildTarget)" >> "$GITHUB_OUTPUT"

  # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  # 1. Run Tests
  # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  run_tests:
    name: Run Tests
    if: ${{ needs.unpack_inputs.outputs.skipTests != 'true' }}
    needs: unpack_inputs
    uses: RedGlow/unity-ci-templates/.github/workflows/step-1-test.yml@main
    with:
      runnerMain: ${{ inputs.runnerMain }}
      unityVersion: ${{ needs.unpack_inputs.outputs.unityVersion }}
      useGitLfs: ${{ needs.unpack_inputs.outputs.useGitLfs }}
      editModePath: ${{ needs.unpack_inputs.outputs.editModePath }}
      playModePath: ${{ needs.unpack_inputs.outputs.playModePath }}
      timeoutMinutes: ${{ fromJson(needs.unpack_inputs.outputs.timeoutMinutesTests) }}
      quietMode: ${{ needs.unpack_inputs.outputs.quietMode }}
    secrets:
      UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
      UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
      UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}

  # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  # 2. Build
  # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  build:
    name: Build
    needs: 
      - unpack_inputs
      - run_tests
    if: >
      always() &&
      needs.unpack_inputs.outputs.testsOnly != 'true' &&
      (needs.run_tests.result == 'success' || needs.run_tests.result == 'skipped')
    uses: RedGlow/unity-ci-templates/.github/workflows/step-2-build.yml@main
    with:
      # If the event is a push with a tag, force buildType to "release"; otherwise, use the input.
      runnerMain: ${{ inputs.runnerMain }}
      runnerMacos: ${{ inputs.runnerMacos }}
      projectName: ${{ needs.unpack_inputs.outputs.projectName }}
      unityVersion: ${{ needs.unpack_inputs.outputs.unityVersion }}
      buildVersion: ${{ needs.unpack_inputs.outputs.buildVersion }}
      buildType: ${{ needs.unpack_inputs.outputs.buildType }}
      buildTargets: ${{ inputs.buildTargets }}
      combineArtifacts: ${{ needs.unpack_inputs.outputs.requiresCombined }}
      timeoutMinutes: ${{ fromJson(needs.unpack_inputs.outputs.timeoutMinutesBuild) }}
      retentionDays: ${{ fromJson(needs.unpack_inputs.outputs.retentionDays) }}
    secrets:
      UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
      UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
      UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}

  # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  # 3. Release
  # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  release:
    name: Release
    needs: 
      - unpack_inputs
      - build
    if: > 
      always() &&
      needs.unpack_inputs.outputs.testsOnly != 'true' &&
      needs.build.result == 'success' && 
      (
        needs.unpack_inputs.outputs.buildType == 'release' || 
        needs.unpack_inputs.outputs.buildType == 'release_candidate'
      )
    uses: RedGlow/unity-ci-templates/.github/workflows/step-3-release.yml@main
    with:
      runnerMain: ${{ inputs.runnerMain }}
      buildType: ${{ needs.unpack_inputs.outputs.buildType }}
      buildVersion: ${{ needs.unpack_inputs.outputs.buildVersion }}
      projectName: ${{ needs.unpack_inputs.outputs.projectName }}
      buildTargets: ${{ inputs.buildTargets }}
      combineArtifacts: ${{ needs.unpack_inputs.outputs.requiresCombined }}
      skipPerBuildTargetArtifacts: ${{ needs.unpack_inputs.outputs.skipPerBuildTarget }}

  # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  # 4. Deploy
  # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  deploy:
    name: Deploy
    needs: 
      - unpack_inputs
      - build
      - release
    if: > 
      always() &&
       needs.unpack_inputs.outputs.testsOnly != 'true' &&
       needs.release.result == 'success' &&
       inputs.validDeployTargets != '[]'
    uses: RedGlow/unity-ci-templates/.github/workflows/step-4-deploy.yml@main
    with:
      runnerMain: ${{ inputs.runnerMain }}
      runnerMacos: ${{ inputs.runnerMacos }}
      buildType: ${{ needs.unpack_inputs.outputs.buildType }}
      buildVersion: ${{ needs.unpack_inputs.outputs.buildVersion }}
      projectName: ${{ needs.unpack_inputs.outputs.projectName }}
      deployTargets: ${{ inputs.validDeployTargets }}
      buildTargets: ${{ inputs.buildTargets }}
      hasCombinedArtifacts: ${{ needs.unpack_inputs.outputs.requiresCombined }}
      artifactSource: build
    secrets:
      CICD_PAT: ${{ secrets.CICD_PAT }}
      BUTLER_API_KEY: ${{ secrets.BUTLER_API_KEY }}
      DEPLOY_API_KEY: ${{ secrets.DEPLOY_API_KEY }}
      ITCH_USERNAME: ${{ secrets.ITCH_USERNAME }}
      ITCH_PROJECT: ${{ secrets.ITCH_PROJECT }}
      APPCENTER_OWNER_NAME: ${{ secrets.APPCENTER_OWNER_NAME }}
      FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      S3_BUCKET: ${{ secrets.S3_BUCKET }}
      STEAM_USERNAME: ${{ secrets.STEAM_USERNAME }}
      STEAM_PASSWORD: ${{ secrets.STEAM_PASSWORD }}
      STEAM_APP_ID: ${{ secrets.STEAM_APP_ID }}
      STEAM_DEPOT_VDF_PATH: ${{ secrets.STEAM_DEPOT_VDF_PATH }}
      APPSTORE_API_KEY_ID: ${{ secrets.APPSTORE_API_KEY_ID }}
      APPSTORE_API_ISSUER_ID: ${{ secrets.APPSTORE_API_ISSUER_ID }}
      APPSTORE_API_PRIVATE_KEY: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
      CUSTOM_SERVER_HOST: ${{ secrets.CUSTOM_SERVER_HOST }}
      CUSTOM_SERVER_USER: ${{ secrets.CUSTOM_SERVER_USER }}
      CUSTOM_SERVER_KEY: ${{ secrets.CUSTOM_SERVER_KEY }}

  # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  # 5. Notify
  # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  notify:
    name: Notify
    needs: 
      - unpack_inputs
      - run_tests
      - build
      - release
      - deploy
    if: > 
      always() && 
      needs.unpack_inputs.outputs.testsOnly != 'true' &&
      (
        needs.unpack_inputs.outputs.buildType == 'release' || 
        needs.unpack_inputs.outputs.buildType == 'release_candidate'
      )
    uses: RedGlow/unity-ci-templates/.github/workflows/step-5-notify.yml@main
    with:
      runnerMain: ${{ inputs.runnerMain }}
      buildVersion: ${{ needs.unpack_inputs.outputs.buildVersion }}
      releaseResult: ${{ needs.release.result }}
      releaseErrorMessage: ${{ needs.release.outputs.releaseErrorMessage }}
      deployResult: ${{ needs.deploy.result }}
      testsHasFails: ${{ needs.run_tests.outputs.hasFails }}
      testsTotal: ${{ needs.run_tests.outputs.totalTests }}
      testsPassed: ${{ needs.run_tests.outputs.passedTests }}
      testsFailedNames: ${{ needs.run_tests.outputs.failedTestNames }}
    secrets:
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
